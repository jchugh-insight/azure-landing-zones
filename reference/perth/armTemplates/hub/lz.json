{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "companyPrefix": {
            "type": "string",
            "maxLength": 5
        },
        "enableVmBackup": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denySubnetWithoutNsg": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyRdp": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyIpForwarding": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableSqlEncryption": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableSqlAudit": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableStorageHttps": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableAksPolicy": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyAksPrivileged": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyAksPrivilegedEscalation": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyHttpIngressForAks": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denySsh": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyPrivateDnsZones": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ]
        }
    },
    "variables": {
        "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '-landingzones')]",
        "policyDefinitions": {
            "deployVmBackup": "/providers/Microsoft.Authorization/policyDefinitions/98d0b9f8-fd90-49c9-88e2-d3baf3b0dd86",
            "denySubnetWithoutNsg": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg')]",
            "denyRdp": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deny-RDP-From-Internet')]",
            "denyIpForwarding": "/providers/Microsoft.Authorization/policyDefinitions/88c0b9da-ce96-4b03-9635-f29a937e2900",
            "deploySqlEncryption": "/providers/Microsoft.Authorization/policyDefinitions/86a912f6-9a06-4e26-b447-11b16ba8659f",
            "deploySqlSecurity": "/providers/Microsoft.Authorization/policyDefinitions/f4c68484-132f-41f9-9b6d-3e4b1cb55036",
            "deploySqlAuditing": "/providers/Microsoft.Authorization/policyDefinitions/a6fb4358-5bf4-4ad7-ba82-2cd2f41ce5e9",
            "storageHttps": "/providers/Microsoft.Authorization/policyDefinitions/404c3081-a854-4457-ae30-26a93ef643f9",
            "deployStorageAtp": "/providers/Microsoft.Authorization/policyDefinitions/361c2074-3595-4e5d-8cab-4f21dffc835c",
            "deployAks": "/providers/Microsoft.Authorization/policyDefinitions/a8eff44f-8c92-45c3-a3fb-9880802d67a7",
            "denyAksPriv": "/providers/Microsoft.Authorization/policyDefinitions/95edb821-ddaf-4404-9732-666045e056b4",
            "denyAksNoPrivEsc": "/providers/Microsoft.Authorization/policyDefinitions/1c6e92c9-99f0-4e55-9cf2-0c234dc48f99",
            "denyHttpIngressAks": "/providers/Microsoft.Authorization/policyDefinitions/1a5b4dca-0b6f-4cf5-907c-56316bc1bf3d",
            "denySsh": "[concat('/providers/Microsoft.Authorization/policyDefinitions/2c89a2e5-7285-40fe-afe0-ae8654b92fab')]",
            "denyPrivateDnsZones": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deny-Private-DNS-Zones')]"
        },
        "policyAssignmentNames": {
            "deployVmBackup": "deploy-vm-backup",
            "denySubnetWithoutNsg": "deny-subnet-without-nsg",
            "denyRdp": "deny-rdp-from-internet",
            "denyIpForwarding": "deny-ip-forwarding",
            "deploySqlEncryption": "enforce-sql-encryption",
            "deploySqlSecurity": "deploy-sql-security",
            "deploySqlAuditing": "deploy-sql-db-auditing",
            "storageHttps": "deny-storage-http",
            "deployStorageAtp": "deploy-storage-atp",
            "deployAks": "deploy-aks-policy",
            "denyAksPriv": "deny-privileged-aks",
            "denyAksNoPrivEsc": "deny-priv-esc-aks",
            "denyHttpIngressAks": "deny-aks-http",
            "denySsh": "deny-ssh-from-internet",
            "denyPrivateDnsZones": "deny-private-dns-zones"
        },
        "rbacOwner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
        "roleAssignmentNames": {
            "deployVmBackup": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployVmBackup))]",
            "deploySqlSecurity": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deploySqlSecurity))]",
            "deploySqlAuditing": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deploySqlAuditing))]",
            "deployStorageAtp": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployStorageAtp))]",
            "deploySqlEncryption": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deploySqlEncryption))]",
            "deployAks": "[guid(concat(parameters('companyPrefix'), variables('policyAssignmentNames').deployAks))]"
        },
        "apiVersions": {
            "policyAssignments": "2020-03-01",
            "roleAssignments": "2020-04-01-preview"
        }
        //"blankTemplateEscaped": "{\"$schema\":\"https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{},\"variables\":{},\"resources\":[],\"outputs\":{}}"
    },
    "resources": [
        // Conditional assignment of Azure Policy to deploy Backup agents to IaaS VMs
        {
            "condition": "[equals(parameters('enableVmBackup'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployVmBackup]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployVmBackup]",
                "displayName": "[variables('policyAssignmentNames').deployVmBackup]",
                "policyDefinitionId": "[variables('policyDefinitions').deployVmBackup]",
                "scope": "[variables('scope')]",
                "parameters": {}
            }
        },
        // Conditionally assign roleAssignment for deploy Backup agents to IaaS VMs
        {
            "condition": "[equals(parameters('enableVmBackup'), 'Yes')]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployVmBackup]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployVmBackup]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbacOwner'))]",
                "principalId": "[if(equals(parameters('enableVmBackup'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployVmBackup), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to subnets without NSGs
        {
            "condition": "[equals(parameters('denySubnetWithoutNsg'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denySubnetWithoutNsg]",
            "location": "[deployment().location]",
            "properties": {
                "description": "[variables('policyAssignmentNames').denySubnetWithoutNsg]",
                "displayName": "[variables('policyAssignmentNames').denySubnetWithoutNsg]",
                "policyDefinitionId": "[variables('policyDefinitions').denySubnetWithoutNsg]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Azure Policy to deny NSG rules with RDP inbound access from the internet
        {
            "condition": "[equals(parameters('denyRdp'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denyRdp]",
            "properties": {
                "description": "[variables('policyAssignmentNames').denyRdp]",
                "displayName": "[variables('policyAssignmentNames').denyRdp]",
                "policyDefinitionId": "[variables('policyDefinitions').denyRdp]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Azure Policy to deny IP forwarding
        {
            "condition": "[equals(parameters('denyIpForwarding'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denyIpForwarding]",
            "location": "[deployment().location]",
            "properties": {
                "description": "[variables('policyAssignmentNames').denyIpForwarding]",
                "displayName": "[variables('policyAssignmentNames').denyIpForwarding]",
                "policyDefinitionId": "[variables('policyDefinitions').denyIpForwarding]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Azure Policy to audit SQL settings
        {
            "condition": "[equals(parameters('enableSqlAudit'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deploySqlAuditing]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deploySqlAuditing]",
                "displayName": "[variables('policyAssignmentNames').deploySqlAuditing]",
                "policyDefinitionId": "[variables('policyDefinitions').deploySqlAuditing]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Service Principal to audit SQL settings
        {
            "condition": "[equals(parameters('enableSqlAudit'), 'Yes')]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deploySqlAuditing]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deploySqlAuditing]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbacOwner'))]",
                "principalId": "[if(equals(parameters('enableSqlAudit'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deploySqlAuditing), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to deploy SQL Encryption
        {
            "condition": "[equals(parameters('enableSqlEncryption'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deploySqlEncryption]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deploySqlEncryption]",
                "displayName": "[variables('policyAssignmentNames').deploySqlEncryption]",
                "policyDefinitionId": "[variables('policyDefinitions').deploySqlEncryption]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Service Principal to deploy SQL Encryption
        {
            "condition": "[equals(parameters('enableSqlEncryption'), 'Yes')]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deploySqlEncryption]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deploySqlEncryption]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbacOwner'))]",
                "principalId": "[if(equals(parameters('enableSqlEncryption'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deploySqlEncryption), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce secure storage
        {
            "condition": "[equals(parameters('enableStorageHttps'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').storageHttps]",
            "location": "[deployment().location]",
            "properties": {
                "description": "[variables('policyAssignmentNames').storageHttps]",
                "displayName": "[variables('policyAssignmentNames').storageHttps]",
                "policyDefinitionId": "[variables('policyDefinitions').storageHttps]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Azure Policy to deploy AKS Policy
        {
            "condition": "[equals(parameters('enableAksPolicy'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAks]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAks]",
                "displayName": "[variables('policyAssignmentNames').deployAks]",
                "policyDefinitionId": "[variables('policyDefinitions').deployAks]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Service Principal to deploy AKS Policy
        {
            "condition": "[equals(parameters('enableAksPolicy'), 'Yes')]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAks]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAks]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbacOwner'))]",
                "principalId": "[if(equals(parameters('enableAksPolicy'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAks), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to deny privilaged containers for AKS
        {
            "condition": "[equals(parameters('denyAksPrivileged'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denyAksPriv]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').denyAksPriv]",
                "displayName": "[variables('policyAssignmentNames').denyAksPriv]",
                "policyDefinitionId": "[variables('policyDefinitions').denyAksPriv]",
                "scope": "[variables('scope')]",
                "parameters": {
                    "effect": {
                        "value": "deny"
                    }
                }
            }
        },
        // Conditional assignment of Azure Policy to deny privilaged escalations for AKS
        {
            "condition": "[equals(parameters('denyAksPrivilegedEscalation'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denyAksNoPrivEsc]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').denyAksNoPrivEsc]",
                "displayName": "[variables('policyAssignmentNames').denyAksNoPrivEsc]",
                "policyDefinitionId": "[variables('policyDefinitions').denyAksNoPrivEsc]",
                "scope": "[variables('scope')]",
                "parameters": {
                    "effect": {
                        "value": "deny"
                    }
                }
            }
        },
        // Conditional assignment of Azure Policy to deny privilaged escalations for AKS
        {
            "condition": "[equals(parameters('denyHttpIngressForAks'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denyHttpIngressAks]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').denyHttpIngressAks]",
                "displayName": "[variables('policyAssignmentNames').denyHttpIngressAks]",
                "policyDefinitionId": "[variables('policyDefinitions').denyHttpIngressAks]",
                "scope": "[variables('scope')]",
                "parameters": {
                    "effect": {
                        "value": "deny"
                    }
                }
            }
        },
        // Conditional assignment of Azure Policy to deny NSG rules with SSH inbound access from the internet
        {
            "condition": "[equals(parameters('denySsh'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denySsh]",
            "properties": {
                "description": "[variables('policyAssignmentNames').denySsh]",
                "displayName": "[variables('policyAssignmentNames').denySsh]",
                "policyDefinitionId": "[variables('policyDefinitions').denySsh]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Azure Policy to deny the creation of Private DNS Zones
        {
            "condition": "[equals(parameters('denyPrivateDnsZones'), 'Yes')]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denyPrivateDnsZones]",
            "properties": {
                "description": "[variables('policyAssignmentNames').denyPrivateDnsZones]",
                "displayName": "[variables('policyAssignmentNames').denyPrivateDnsZones]",
                "policyDefinitionId": "[variables('policyDefinitions').denyPrivateDnsZones]",
                "scope": "[variables('scope')]"
            }
        }
    ],
    "outputs": {}
}