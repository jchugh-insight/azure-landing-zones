{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "companyPrefix": {
            "type": "string",
            "maxLength": 5
        },
        "locationPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "environmentPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "argPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "omsPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "staPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "subscriptionId": {
            "type": "string",
            "maxLength": 36,
            "defaultValue": ""
        },
        "enableLogAnalytics": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableAsc": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "ascEmailContact": {
            "type": "string"
        },
        "enableAscForServers": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForAppServices": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForStorage": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForSql": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKeyVault": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForArm": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForDns": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKubernetes": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForRegistries": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableLtrStorage": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ]
        }
    },
    "variables": {
        "scope": {
            "topLevel": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'))]"
        },
        "policyDefinitions": {
            "deployAzActivityLogLa": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ActivityLog-La')]",
            "deployAzActivityLogSta": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deploy-Diagnostics-ActivityLog-sta')]",
            "deployAzResourceDiagnostics": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policySetDefinitions/Deploy-Diag-LogAnalytics')]",
            "deployVmMonitoring": "/providers/Microsoft.Authorization/policyDefinitions/0868462e-646c-4fe3-9ced-a733534b6a2c",
            "deployAzSecurityCenterPricing": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-Pricing')]",
            "deployAzSecurityCenterEmail": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deploy-ASC-Email-Contact')]",
            "deployNsgFlowLogs": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deploy-Nsg-FlowLogs')]",
            "deployAzSecurityCenterAutoProvision": "/providers/Microsoft.Authorization/policyDefinitions/8e7da0a5-0a0e-4bbc-bfc0-7773c018b616",
            "enableAscMonitoring": "/providers/Microsoft.Authorization/policySetDefinitions/1f3afdf9-d0c9-4c3d-847f-89da613e70a8",
            "denyAppGwyWaf": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deny-AppGW-Without-WAF')]"
        },
        "policyAssignmentNames": {
            "deployAzActivityLogLa": "Deploy-AzActivity-La",
            "deployAzActivityLogSta": "Deploy-AzActivity-Sta",
            "deployAzResourceDiagnostics": "Deploy-AzResource-Diag",
            "deployVmMonitoring": "Deploy-VM-Monitoring",
            "deployAzSecurityCenterPricing": "Deploy-ASC-Pricing",
            "deployAzSecurityCenterEmail": "Deploy-ASC-Email-Contact",
            "deployNsgFlowLogs": "Deploy-Nsg-FlowLogs",
            "deployAzSecurityCenterAutoProvision": "Deploy-ASC-AutoProvision",
            "enableAscMonitoring": "Enable-ASC-Monitoring",
            "denyAppGwyWaf": "Deny-AppGW-Without-WAF"
        },
        "rbac": {
            "owner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635",
            "contributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
            "logAnalyticsContributor": "92aaf0da-9dab-42b6-94a3-d43ce8d16293",
            "securityAdmin": "fb1c8493-542b-48eb-b624-b4c8fea62acd"
        },
        "roleAssignmentNames": {
            "deployAzActivityLogLa": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployAzActivityLogLa))]",
            "deployAzActivityLogSta": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployAzActivityLogSta))]",
            "deployAzResourceDiagnostics": "[guid(concat(parameters('companyPrefix'), variables('policyAssignmentNames').deployAzResourceDiagnostics))]",
            "deployVmMonitoring": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployVmMonitoring))]",
            "deployAzSecurityCenterPricing": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployAzSecurityCenterPricing))]",
            "deployAzSecurityCenterEmail": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployAzSecurityCenterEmail))]",
            "deployAzSecurityCenterAutoProvision": "[guid(concat(parameters('companyPrefix'),variables('policyAssignmentNames').deployAzSecurityCenterAutoProvision))]",
            "enableAscMonitoring": "[guid(concat(parameters('companyPrefix'), variables('policyAssignmentNames').enableAscMonitoring))]",
            "deployNsgFlowLogs": "[guid(concat(parameters('companyPrefix'), variables('policyAssignmentNames').deployNsgFlowLogs))]"
        },
        "blankTemplateEscaped": "{\"$schema\":\"https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{},\"variables\":{},\"resources\":[],\"outputs\":{}}",
        "namingPrefix": "[concat(parameters('companyPrefix'), '-', parameters('locationPrefix'), '-', parameters('environmentPrefix'))]",
        "resourceGroupName": "[toLower(concat(variables('namingPrefix'), '-', parameters('argPrefix'), '-monitoring'))]",
        "logAnalyticsName": "[toLower(take(concat(variables('namingPrefix'), '-', parameters('omsPrefix'), '-', guid(parameters('companyPrefix'))), 24))]",
        "storageNamingPrefix": "[concat(parameters('companyPrefix'), parameters('locationPrefix'), parameters('environmentPrefix'))]",
        "storageName": "[take(toLower(concat(variables('storageNamingPrefix'), parameters('staPrefix'), guid(parameters('companyPrefix')))), 20)]",
        "deploymentNames": {
            "ascPricing": "[take(concat('ascPricing', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "ascEmail": "[take(concat('ascEmail', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "ascAutoProvision": "[take(concat('ascAutoProvision', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "azActivityLogsLa": "[take(concat('azActivityLogsLa', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "azActivityLogsSta": "[take(concat('azActivityLogsSta', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]",
            "azKeyVault": "[take(concat('azKeyVault', '-', deployment().location, '-', guid(parameters('companyPrefix'))), 64)]"
        },
        "apiVersions": {
            "deployments": "2020-06-01",
            "policyAssignments": "2020-03-01",
            "roleAssignments": "2020-04-01-preview"
        }
    },
    "resources": [
        // Conditional assignment of Azure Policy to deploy NSG Flow Logs
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployNsgFlowLogs]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployNsgFlowLogs]",
                "displayName": "[variables('policyAssignmentNames').deployNsgFlowLogs]",
                "policyDefinitionId": "[variables('policyDefinitions').deployNsgFlowLogs]",
                "scope": "[variables('scope').topLevel]",
                "parameters": {
                    "logAnalytics": {
                        "value": "[toLower(concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    },
                    "storageAccountResourceId": {
                        "value": "[toLower(concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.Storage/storageAccounts/', variables('storageName')))]"
                    },
                    "retention": {
                        "value": 7
                    },
                    "trafficAnalyticsInterval": {
                        "value": 60
                    },
                    "flowAnalyticsEnabled": {
                        "value": false
                    }
                }
            }
        },
        // Role assignment for the conditional policy assignment to deploy NSG Flow Logs
        {
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployNsgFlowLogs]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployNsgFlowLogs]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').logAnalyticsContributor)]",
                "principalId": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployNsgFlowLogs), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce activity logs from subscriptions to Log Analytics
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzActivityLogLa]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAzActivityLogLa]",
                "displayName": "[variables('policyAssignmentNames').deployAzActivityLogLa]",
                "policyDefinitionId": "[variables('policyDefinitions').deployAzActivityLogLa]",
                "scope": "[variables('scope').topLevel]",
                "parameters": {
                    "logAnalytics": {
                        "value": "[toLower(concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    }
                }
            }
        },
        // Role assignment for the conditional policy assignment for Azure Activity Logs to Log Analytics
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzActivityLogLa]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzActivityLogLa]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').owner)]",
                "principalId": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogLa), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce activity logs from subscriptions to Storage Account
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLtrStorage'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzActivityLogSta]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAzActivityLogSta]",
                "displayName": "[variables('policyAssignmentNames').deployAzActivityLogSta]",
                "policyDefinitionId": "[variables('policyDefinitions').deployAzActivityLogSta]",
                "scope": "[variables('scope').topLevel]",
                "parameters": {
                    "storageAccountId": {
                        "value": "[toLower(concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.Storage/storageAccounts/', variables('storageName')))]"
                    }
                }
            }
        },
        // Role assignment for the conditional policy assignment for Azure Activity Logs to Storage Account
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLtrStorage'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzActivityLogSta]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzActivityLogSta]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').owner)]",
                "principalId": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogSta), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce Log Analytics VM extension to Windows and Linux virtual machines
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployVmMonitoring]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployVmMonitoring]",
                "displayName": "[variables('policyAssignmentNames').deployVmMonitoring]",
                "policyDefinitionId": "[variables('policyDefinitions').deployVmMonitoring]",
                "scope": "[variables('scope').topLevel]",
                "parameters": {
                    "logAnalytics": {
                        "value": "[toLower(concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    }
                }
            }
        },
        // Role assignment for the conditional VM monitoring policy assignment
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployVmMonitoring]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployVmMonitoring]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').logAnalyticsContributor)]",
                "principalId": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployVmMonitoring), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce Azure resource diagnostics to Log Analytics
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzResourceDiagnostics]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAzResourceDiagnostics]",
                "displayName": "[variables('policyAssignmentNames').deployAzResourceDiagnostics]",
                "policyDefinitionId": "[variables('policyDefinitions').deployAzResourceDiagnostics]",
                "scope": "[variables('scope').topLevel]",
                "parameters": {
                    "logAnalytics": {
                        "value": "[toLower(concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    }
                }
            }
        },
        // Role assignment for the conditional Azure resource diagnostics policy assignment
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzResourceDiagnostics]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzResourceDiagnostics]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').contributor)]",
                "principalId": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzResourceDiagnostics), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce ASC Pricing on subscriptions
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzSecurityCenterPricing]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAzSecurityCenterPricing]",
                "displayName": "[variables('policyAssignmentNames').deployAzSecurityCenterPricing]",
                "policyDefinitionId": "[variables('policyDefinitions').deployAzSecurityCenterPricing]",
                "scope": "[variables('scope').topLevel]",
                "parameters": {
                    "pricingTierVms": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "pricingTierSqlServers": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "pricingTierAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "pricingTierStorageAccounts": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "pricingTierKeyVaults": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "pricingTierKubernetesService": {
                        "value": "[parameters('enableAscForKubernetes')]"
                    },
                    "pricingTierArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "pricingTierDns": {
                        "value": "[parameters('enableAscForDns')]"
                    },
                    "pricingTierContainerRegistry": {
                        "value": "[parameters('enableAscForRegistries')]"
                    }
                }
            }
        },
        // Role assignment for the conditional ASC Pricing policy assignment
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzSecurityCenterPricing]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzSecurityCenterPricing]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').owner)]",
                "principalId": "[if(equals(parameters('enableAsc'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterPricing), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce ASC Auto Provisioning on subscriptions
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzSecurityCenterAutoProvision]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAzSecurityCenterAutoProvision]",
                "displayName": "[variables('policyAssignmentNames').deployAzSecurityCenterAutoProvision]",
                "policyDefinitionId": "[variables('policyDefinitions').deployAzSecurityCenterAutoProvision]",
                "scope": "[variables('scope').topLevel]",
                "parameters": {
                    "logAnalytics": {
                        "value": "[toLower(concat('/subscriptions/', parameters('subscriptionId'), '/resourceGroups/', variables('resourceGroupName'), '/providers/Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsName')))]"
                    }
                }
            }
        },
        // Role assignment for the conditional ASC Auto Provisioning policy assignment
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzSecurityCenterAutoProvision]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzSecurityCenterAutoProvision]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').contributor)]",
                "principalId": "[if(equals(parameters('enableAsc'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterAutoProvision), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enforce ASC Email Contact
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployAzSecurityCenterEmail]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployAzSecurityCenterEmail]",
                "displayName": "[variables('policyAssignmentNames').deployAzSecurityCenterEmail]",
                "policyDefinitionId": "[variables('policyDefinitions').deployAzSecurityCenterEmail]",
                "scope": "[variables('scope').topLevel]",
                "parameters": {
                    "emailSecurityContact": {
                        "value": "[parameters('ascEmailContact')]"
                    },
                    "alertNotifications": {
                        "value": "On"
                    },
                    "alertsToAdmins": {
                        "value": "On"
                    }
                }
            }
        },
        // Role assignment for the conditional ASC email contact policy assignment
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployAzSecurityCenterEmail]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployAzSecurityCenterEmail]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').owner)]",
                "principalId": "[if(equals(parameters('enableAsc'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterEmail), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to enable ASC monitoring
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').enableAscMonitoring]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').enableAscMonitoring]",
                "displayName": "[variables('policyAssignmentNames').enableAscMonitoring]",
                "policyDefinitionId": "[variables('policyDefinitions').enableAscMonitoring]",
                "scope": "[variables('scope').topLevel]"
            }
        },
        // Conditional deployment to invoke template from ActivityLog diagnostics Logs to Log Analytics
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLogAnalytics'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[variables('deploymentNames').azActivityLogsLa]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzActivityLogLa)]"
            ],
            "subscriptionId": "[parameters('subscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), reference(variables('policyDefinitions').deployAzActivityLogLa, '2018-05-01').policyRule.then.details.deployment.properties.template, variables('blankTemplateEscaped'))]",
                "parameters": "[if(equals(parameters('enableLogAnalytics'), 'Yes'), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogLa), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployment to invoke template from ActivityLog diagnostics Logs to Azure Storage
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))),equals(parameters('enableLtrStorage'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[variables('deploymentNames').azActivityLogsSta]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzActivityLogSta)]"
            ],
            "subscriptionId": "[parameters('subscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(equals(parameters('enableLtrStorage'), 'Yes'), reference(variables('policyDefinitions').deployAzActivityLogSta, '2018-05-01').policyRule.then.details.deployment.properties.template, variables('blankTemplateEscaped'))]",
                "parameters": "[if(equals(parameters('enableLtrStorage'), 'Yes'), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzActivityLogSta), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployment to invoke ASC Pricing deployment
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[variables('deploymentNames').ascPricing]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzSecurityCenterPricing)]"
            ],
            "subscriptionId": "[parameters('subscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(variables('policyDefinitions').deployAzSecurityCenterPricing, '2018-05-01').policyRule.then.details.deployment.properties.template, 'na')]",
                "parameters": "[if(and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterPricing), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployment to invoke ASC Auto Provisioning deployment
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[variables('deploymentNames').ascAutoProvision]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzSecurityCenterAutoProvision)]"
            ],
            "subscriptionId": "[parameters('subscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(variables('policyDefinitions').deployAzSecurityCenterAutoProvision, '2018-05-01').policyRule.then.details.deployment.properties.template, 'na')]",
                "parameters": "[if(and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterAutoProvision), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional deployment to invoke ASC Email Contact deployment
        {
            "condition": "[and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "[variables('deploymentNames').ascEmail]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Authorization/roleAssignments/', variables('roleAssignmentNames').deployAzSecurityCenterEmail)]"
            ],
            "subscriptionId": "[parameters('subscriptionId')]",
            "properties": {
                "mode": "incremental",
                "template": "[if(and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(variables('policyDefinitions').deployAzSecurityCenterEmail, '2018-05-01').policyRule.then.details.deployment.properties.template, 'na')]",
                "parameters": "[if(and(not(empty(parameters('subscriptionId'))), equals(parameters('enableAsc'), 'Yes')), reference(concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployAzSecurityCenterEmail), '2018-05-01').parameters, json('null'))]"
            }
        },
        // Conditional assignment of Azure Policy to deny Azure App Gateway without WAF
        {
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denyAppGwyWaf]",
            "location": "[deployment().location]",
            "properties": {
                "description": "[variables('policyAssignmentNames').denyAppGwyWaf]",
                "displayName": "[variables('policyAssignmentNames').denyAppGwyWaf]",
                "policyDefinitionId": "[variables('policyDefinitions').denyAppGwyWaf]",
                "parameters": {},
                "scope": "[variables('scope').topLevel]"
            }
        }
    ],
    "outputs": {}
}