{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "companyPrefix": {
            "type": "string",
            "maxLength": 5
        },
        "locationPrefix": {
            "type": "string",
            "maxLength": 5
        },
        "environmentPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "argPrefix": {
            "type": "string",
            "maxLength": 3
        },
        "enableIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "denyRdpForIdentity": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denySubnetWithoutNsgForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyPipForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableVmBackupForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "identitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36
        }
    },
    "variables": {
        "scope": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '-identity')]",
        "policyDefinitions": {
            "denySubnetWithoutNsg": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deny-Subnet-Without-Nsg')]",
            "denyPip": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deny-PublicIP')]",
            "denyRdp": "[concat('/providers/Microsoft.Management/managementGroups/', parameters('companyPrefix'), '/providers/Microsoft.Authorization/policyDefinitions/Deny-RDP-From-Internet')]",
            "deployVmBackup": "/providers/Microsoft.Authorization/policyDefinitions/98d0b9f8-fd90-49c9-88e2-d3baf3b0dd86"
        },
        "policyAssignmentNames": {
            "denySubnetWithoutNsg": "Deny-Subnet-Without-Nsg",
            "denyRdp": "Deny-RDP-from-internet",
            "denyPip": "Deny-Public-IP",
            "deployVmBackup": "Deploy-VM-Backup"
        },
        "rbac": {
            "owner": "8e3af657-a8ff-443c-a75c-2fe8c4bcb635"
        },
        "roleAssignmentNames": {
            "deployVmBackup": "[guid(concat(parameters('companyPrefix'), 'identity', variables('policyAssignmentNames').deployVmBackup))]"
        },
        "deploymentName": "[take(concat(deployment().name, '-keyVault'), 64)]",
        "namingPrefix": "[concat(parameters('companyPrefix'), '-', parameters('locationPrefix'), '-', parameters('environmentPrefix'))]",
        "resourceGroups": {
            "adds": "[toLower(concat(variables('namingPrefix'), '-', parameters('argPrefix'), '-adds'))]",
            "network": "[toLower(concat(variables('namingPrefix'), '-', parameters('argPrefix'), '-network'))]"
        },
        "apiVersions": {
            "deployments": "2020-06-01",
            "resourceGroups": "2020-06-01",
            "policyAssignments": "2020-03-01",
            "locks": "2016-09-01",
            "roleAssignments": "2020-04-01-preview",
            "networkWatchers": "2019-04-01",
            "virtualNetworks": "2020-07-01"
        }
        //"blankTemplateEscaped": "{\"$schema\":\"https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#\",\"contentVersion\":\"1.0.0.0\",\"parameters\":{},\"variables\":{},\"resources\":[],\"outputs\":{}}"
    },
    "resources": [
        // Conditional assignment of Azure Policy to enforce the Azure Backup agent for install
        {
            "condition": "[and(not(empty(parameters('identitySubscriptionId'))),equals(parameters('enableVmBackupForIdentity'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').deployVmBackup]",
            "location": "[deployment().location]",
            "identity": {
                "type": "SystemAssigned"
            },
            "properties": {
                "description": "[variables('policyAssignmentNames').deployVmBackup]",
                "displayName": "[variables('policyAssignmentNames').deployVmBackup]",
                "policyDefinitionId": "[variables('policyDefinitions').deployVmBackup]",
                "scope": "[variables('scope')]",
                "parameters": {}
            }
        },
        // Role assignment of the conditional Backup policy assignment for VM Backups
        {
            "condition": "[and(not(empty(parameters('identitySubscriptionId'))),equals(parameters('enableVmBackupForIdentity'), 'Yes'))]",
            "type": "Microsoft.Authorization/roleAssignments",
            "apiVersion": "[variables('apiVersions').roleAssignments]",
            "name": "[variables('roleAssignmentNames').deployVmBackup]",
            "dependsOn": [
                "[variables('policyAssignmentNames').deployVmBackup]"
            ],
            "properties": {
                "principalType": "ServicePrincipal",
                "roleDefinitionId": "[concat('/providers/Microsoft.Authorization/roleDefinitions/', variables('rbac').owner)]",
                "principalId": "[if(equals(parameters('enableVmBackupForIdentity'), 'Yes'), toLower(reference(concat('/providers/Microsoft.Authorization/policyAssignments/', variables('policyAssignmentNames').deployVmBackup), '2018-05-01', 'Full' ).identity.principalId), 'na')]"
            }
        },
        // Conditional assignment of Azure Policy to deny the creation of Public IPs
        {
            "condition": "[and(not(empty(parameters('identitySubscriptionId'))),equals(parameters('denyPipForIdentity'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denyPip]",
            "properties": {
                "description": "[variables('policyAssignmentNames').denyPip]",
                "displayName": "[variables('policyAssignmentNames').denyPip]",
                "policyDefinitionId": "[variables('policyDefinitions').denyPip]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Azure Policy to deny RDP from the Internet
        {
            "condition": "[and(not(empty(parameters('identitySubscriptionId'))),equals(parameters('denyRdpForIdentity'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denyRdp]",
            "properties": {
                "description": "[variables('policyAssignmentNames').denyRdp]",
                "displayName": "[variables('policyAssignmentNames').denyRdp]",
                "policyDefinitionId": "[variables('policyDefinitions').denyRdp]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional assignment of Azure Policy to deny the creation of subnets without NSGs
        {
            "condition": "[and(not(empty(parameters('identitySubscriptionId'))),equals(parameters('denySubnetWithoutNsgForIdentity'), 'Yes'))]",
            "type": "Microsoft.Authorization/policyAssignments",
            "apiVersion": "[variables('apiVersions').policyAssignments]",
            "name": "[variables('policyAssignmentNames').denySubnetWithoutNsg]",
            "properties": {
                "description": "[variables('policyAssignmentNames').denySubnetWithoutNsg]",
                "displayName": "[variables('policyAssignmentNames').denySubnetWithoutNsg]",
                "policyDefinitionId": "[variables('policyDefinitions').denySubnetWithoutNsg]",
                "scope": "[variables('scope')]"
            }
        },
        // Conditional deployment to invoke the creation of a Resource Group for ADDS and associated Resource Locks
        {
            "condition": "[and(not(empty(parameters('identitySubscriptionId'))),equals(parameters('enableIdentity'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "ADDS-RG",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [
                        {
                            "type": "Microsoft.Resources/resourceGroups",
                            "apiVersion": "[variables('apiVersions').resourceGroups]",
                            "location": "[deployment().location]",
                            "name": "[variables('resourceGroups').adds]",
                            "properties": {}
                        },
                        {
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "[variables('apiVersions').deployments]",
                            "name": "[variables('deploymentName')]",
                            "resourceGroup": "[variables('resourceGroups').adds]",
                            "dependsOn": [
                                "[concat('Microsoft.Resources/resourceGroups/', variables('resourceGroups').adds)]"
                            ],
                            "properties": {
                                "mode": "Incremental",
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {},
                                    "resources": [
                                        {
                                            "type": "Microsoft.Authorization/locks",
                                            "apiVersion": "[variables('apiVersions').locks]",
                                            "name": "ResourceGroup-DontDelete",
                                            "properties": {
                                                "level": "CanNotDelete",
                                                "notes": "Prevent deletion of the resourceGroup"
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        // Conditional deployment to invoke the creation of a Resource Group for Networking and associated Resource Locks
        {
            "condition": "[and(not(empty(parameters('identitySubscriptionId'))),equals(parameters('enableIdentity'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "[variables('apiVersions').deployments]",
            "name": "Network-RG",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [
                        {
                            "type": "Microsoft.Resources/resourceGroups",
                            "apiVersion": "[variables('apiVersions').resourceGroups]",
                            "location": "[deployment().location]",
                            "name": "[variables('resourceGroups').network]",
                            "properties": {}
                        },
                        {
                            "type": "Microsoft.Resources/deployments",
                            "apiVersion": "[variables('apiVersions').deployments]",
                            "name": "[variables('deploymentName')]",
                            "resourceGroup": "[variables('resourceGroups').network]",
                            "dependsOn": [
                                "[concat('Microsoft.Resources/resourceGroups/', variables('resourceGroups').network)]"
                            ],
                            "properties": {
                                "mode": "Incremental",
                                "template": {
                                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                                    "contentVersion": "1.0.0.0",
                                    "parameters": {},
                                    "resources": [
                                        {
                                            "type": "Microsoft.Authorization/locks",
                                            "apiVersion": "[variables('apiVersions').locks]",
                                            "name": "ResourceGroup-DontDelete",
                                            "properties": {
                                                "level": "CanNotDelete",
                                                "notes": "Prevent deletion of the resourceGroup"
                                            }
                                        },
                                                                                {
                                            "type": "Microsoft.Network/virtualNetworks",
                                            "apiVersion": "[variables('apiVersions').virtualNetworks]",
                                            "name": "[variables('azVnetName')]",
                                            "location": "[deployment().location]",
                                            "dependsOn": [
                                            ],
                                            "properties": {
                                                "addressSpace": {
                                                    "addressPrefixes": [
                                                        "[parameters('addressPrefix')]"
                                                    ]
                                                }
                                            },
                                            "resources": [
                                            ]
                                        },
                                        // Conditional deployment of Network Watcher
                                        {
                                            
                                            "condition": "[and(not(empty(parameters('identitySubscriptionId'))),equals(parameters('enableIdentity'), 'Yes'))]",
                                            "type": "Microsoft.Network/networkWatchers",
                                            "apiVersion": "[variables('apiVersions').networkWatchers]",
                                            "name": "test",
                                            "location": "[deployment().location]",
                                            "tags": {},
                                            "properties": {},
                                            "resources": []
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        }
    ],
    "outputs": {}
}