{
    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/tenantDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "enterpriseScaleCompanyPrefix": {
            "type": "string",
            "maxLength": 10,
            "metadata": {
                "description": "Provide a prefix (max 10 characters, unique at tenant-scope) for the Management Group hierarchy and other resources created as part of Enterprise-scale."
            }
        },
        "managementSubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for management. If you don't want to bring a subscription, leave this parameter empty as is."
            }
        },
        "connectivitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for networking."
            }
        },
        "identitySubscriptionId": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 36,
            "metadata": {
                "description": "Provide the subscription id of an existing, empty subscription you want to dedicate for identity."
            }
        },
        "onlinelandingZonesubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first online landing zones."
            }
        },
        "corplandingZonesubscriptionId": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Provide the subscription ids for existing, empty subscriptions you want to move in as your first corp landing zones."
            }
        },
        "locationPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the location identifier prefix (3 characters)"
            }
        },
        "platformMgmtPrefix": {
            "type": "string",
            "maxLength": 4,
            "metadata": {
                "description": "Provide the PLatform Management Subscription identifier prefix (4 characters)"
            }
        },
        "platformIdamPrefix": {
            "type": "string",
            "maxLength": 4,
            "metadata": {
                "description": "Provide the PLatform Identity Subscription identifier prefix (4 characters)"
            }
        },
        "platformConnPrefix": {
            "type": "string",
            "maxLength": 4,
            "metadata": {
                "description": "Provide the PLatform Connectivity Subscription identifier prefix (4 characters)"
            }
        },
        "argPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the resource group identifier"
            }
        },
        "lawPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the log analytics identifier prefix"
            }
        },
        "aaaPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the Azure Automation identifier prefix"
            }
        },
        "staPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the Azure Storage identifier prefix"
            }
        },
        "vWanPrefix": {
            "type": "string"
        },
        "vHubPrefix": {
            "type": "string"
        },
        "ddosPrefix": {
            "type": "string",
            "maxLength": 4,
            "metadata": {
                "description": "Provide the Azure ddos Protection prefix"
            }
        },
        "vngPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the virtual network gateway identifier prefix"
            }
        },
        "vntPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the virtual network identifier prefix"
            }
        },
        "pipPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the public IP identifier prefix"
            }
        },
        "afwPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the Azure Firewall identifier prefix"
            }
        },
        "afpPrefix": {
            "type": "string",
            "maxLength": 3,
            "metadata": {
                "description": "Provide the Azure Firewall Policy identifier prefix"
            }
        },
        "denySubnetWithoutNsgForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyRdpForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "denyPipForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableVmBackupForIdentity": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableLogAnalytics": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "retentionInDays": {
            "type": "string",
            "defaultValue": ""
        },
        "enableAsc": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected when also adding a subscription for management, ARM will assign two policies to enable auditing in your environment, into the Log Analytics workspace for platform monitoring. If 'No', it will be ignored."
            }
        },
        "emailContactAsc": {
            "type": "string",
            "metadata": {
                "description": "Email address for Azure Security Center contact details."
            },
            "defaultValue": ""
        },
        "enableAscForServers": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForAppServices": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForStorage": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForSql": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForSqlOnVm": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKeyVault": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForArm": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForDns": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForKubernetes": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAscForRegistries": {
            "type": "string",
            "defaultValue": "Free",
            "allowedValues": [
                "Standard",
                "Free"
            ]
        },
        "enableAksPolicy": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyAksPrivileged": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyAksPrivilegedEscalation": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyHttpIngressForAks": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableVmMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VM monitoring."
            }
        },
        "enableVmssMonitoring": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected, policy will be assigned to enforce VMSS monitoring."
            }
        },
        "enableSecuritySolution": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableEncryptionInTransit": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableAgentHealth": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableChangeTracking": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableUpdateMgmt": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableActivityLog": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableVmInsights": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableServiceMap": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableSqlAssessment": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "Yes"
        },
        "enableKeyVaultAnalytics": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableStorage": {
            "type": "string",
            "defaultValue": "Yes",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "If 'Yes' is selected then an Azure Storage Account will be deployed."
            }
        },
        "enableSqlAudit": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableSqlEncryption": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableVmBackup": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyRdp": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyPublicEndpoints": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableStorageHttps": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableLzDdoS": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denyIpForwarding": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "denySubnetWithoutNsg": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "addressPrefix": {
            "type": "string",
            "defaultValue": ""
        },
        "enableVpnGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enableErGw": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "location": {
            "type": "string",
            "defaultValue": "[deployment().location]"
        },
        "enableHub": {
            "type": "string",
            "allowedValues": [
                "vhub",
                "vwan",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableAzFw": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableAzFwDnsProxy": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "enableDdoS": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enablePrivateDnsZones": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "enablePrivateDnsZonesForlandingZones": {
            "type": "string",
            "defaultValue": "No",
            "allowedValues": [
                "Yes",
                "No"
            ]
        },
        "subnetMaskForAzFw": {
            "type": "string",
            "defaultValue": ""
        },
        "subnetMaskForGw": {
            "type": "string",
            "defaultValue": ""
        },
        "gwRegionalOrAz": {
            "type": "string",
            "defaultValue": ""
        },
        "gwAzSku": {
            "type": "string",
            "defaultValue": ""
        },
        "gwRegionalSku": {
            "type": "string",
            "defaultValue": ""
        },
        "erRegionalOrAz": {
            "type": "string",
            "defaultValue": ""
        },
        "erAzSku": {
            "type": "string",
            "defaultValue": ""
        },
        "erRegionalSku": {
            "type": "string",
            "defaultValue": ""
        },
        "firewallZones": {
            "type": "array",
            "defaultValue": []
        },
        "paToken": {
            "type": "securestring",
            "defaultValue": ""
        },
        "principalId": {
            "type": "array",
            "defaultValue": []
        },
        "appId": {
            "type": "string",
            "defaultValue": ""
        },
        "principalSecret": {
            "type": "securestring",
            "defaultValue": ""
        },
        "gitHubUserNameOrOrg": {
            "type": "string",
            "defaultValue": ""
        },
        "repositoryName": {
            "type": "string",
            "defaultValue": ""
        },
        "enableAzOps": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "defaultValue": "No"
        },
        "expressRouteScaleUnit": {
            "type": "string",
            "defaultValue": "1"
        },
        "vpnGateWayScaleUnit": {
            "type": "string",
            "defaultValue": "1"
        },
        "identityAddressPrefix": {
            "type": "string",
            "defaultValue": ""
        }
    },
    "variables": {
        "managementGroups": {
            "topLevel": "[parameters('enterpriseScaleCompanyPrefix')]",
            "platform": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'platform')]",
            "management": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'management')]",
            "connectivity": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'connectivity')]",
            "identity": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'identity')]",
            "landingZones": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'landingzones')]",
            "corp": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'corp')]",
            "online": "[concat(parameters('enterpriseScaleCompanyPrefix'), '-', 'online')]"
        },
        "scopes": {
            "topLevelManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('managementGroups').topLevel)]",
            "platformManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('managementGroups').platform)]",
            "managementManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('managementGroups').management)]",
            "connectivityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('managementGroups').connectivity)]",
            "identityManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('managementGroups').identity)]",
            "landingZonesManagegmentGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('managementGroups').landingZones)]",
            "corpManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('managementGroups').corp)]",
            "onlineManagementGroup": "[tenantResourceId('Microsoft.Management/managementGroups/', variables('managementGroups').online)]"
        },
        // Declaring all required deployment uri's used for deployments of composite ARM templates for ESLZ
        "deploymentUris": {
            "managementGroups": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/managementGroups/mgmtGroups.json')]",
            "policyDefinitions": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyDefinitions/policies.json')]",
            "subscriptionPlacement": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/subscriptionOrganization/subscriptionOrganization.json')]",
            "azOpsRBAC": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/roleAssignments/azOpsRoleAssignment.json')]",
            "roleAssignments": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/roleAssignments/roleAssignment.json')]",

            "vnetConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/hubspoke-connectivity.json')]",
            "vwanConnectivityHub": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vwan-connectivity.json')]",
            "monitoring": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/logAnalyticsWorkspace.json')]",
            "resourceGroup": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/resourceGroup.json')]",
            "corpVnetPeering": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vnetPeering.json')]",
            "corpVwanPeering": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/vnetPeeringVwan.json')]",
            "monitoringSolutions": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/logAnalyticsSolutions.json')]",
            "storage": "[uri(deployment().properties.templateLink.uri, 'subscriptionTemplates/storage.json')]",
            "logAnalyticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-logAnalyticsPolicyAssignment.json')]",
            "activityDiagnosticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-activityLogPolicyAssignment.json')]",
            "ascConfigPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-ascConfigPolicyAssignment.json')]",
            "asbPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-asbPolicyAssignment.json')]",
            "resourceDiagnosticsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-resourceDiagnosticsPolicyAssignment.json')]",
            "azVmMonitorPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-vmMonitoringPolicyAssignment.json')]",
            "azVmssMonitorPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-vmssMonitoringPolicyAssignment.json')]",
            "azBackupLzPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-vmBackupPolicyAssignment.json')]",
            "azBackupIdentityPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-vmBackupPolicyAssignment.json')]",
            "azPolicyForAksPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-aksPolicyPolicyAssignment.json')]",
            "aksPrivEscalationPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-aksPrivEscalationPolicyAssignment.json')]",
            "aksPrivilegedPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-aksPrivilegedPolicyAssignment.json')]",
            "tlsSslPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-dine-append-tlsSslPolicyAssignment.json')]",
            "aksHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-aksWithoutHttpsPolicyAssignment.json')]",
            "ipFwdPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-ipForwardingPolicyAssignment.json')]",
            "publicEndpointPolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyDefinitions/deny-publicEndpointsPolicySetDefinition.json')]",
            "publicEndpointPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-publicEndpointPolicyAssignment.json')]",
            "privateDnsZonePolicySetDefinition": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyDefinitions/dine-privateDnsZonesPolicySetDefinition.json')]",
            "privateDnsZonePolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-privateDnsZonesPolicyAssignment.json')]",
            "pipPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-publicIpAddressPolicyAssignment.json')]",
            "rdpFromInternetPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-rdpFromInternetPolicyAssignment.json')]",
            "storageHttpsPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-storageWithoutHttpsPolicyAssignment.json')]",
            "subnetNsgPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/deny-subnetWithoutNsgPolicyAssignment.json')]",
            "sqlAuditPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-sqlAuditingPolicyAssignment.json')]",
            "sqlEncryptionPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/dine-sqlEncryptionPolicyAssignment.json')]",
            "ddosPolicyAssignment": "[uri(deployment().properties.templateLink.uri, 'mgTemplates/policyAssignments/modify-ddosProtectionPlanPolicyAssignment.json')]",


            "privateDnsZones": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/privateDnsZones.json')]",
            "ddosProtection": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/ddosProtection.json')]",
            "azOpsSetup": "[uri(deployment().properties.templateLink.uri, 'resourceGroupTemplates/azOpsArm.json')]"

        },
        // Declaring deterministic deployment names
        "deploymentNames": {
            "mgmtGroupDeploymentName": "[take(concat('mgmtGroups', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "managementSubscriptionPlacement": "[take(concat('mgmtSubscription', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "connectivitySubscriptionPlacement": "[take(concat('connSubscription', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "identitySubscriptionPlacement": "[take(concat('idamSubscription', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "policyDeploymentName": "[take(concat('EntScale-Policy', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "azOpsRbacDeploymentName": "[take(concat('EntScale-AzOpsRbac', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "azopsDeploymentName": "[take(concat('EntScale-azops', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "ddosDeploymentName": "[take(concat('EntScale-ddos', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "ddosHubPolicyDeploymentName": "[take(concat('EntScale-DDoSHubPolicy', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "ddosLzPolicyDeploymentName": "[take(concat('EntScale-DDoSLZPolicy', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "azOpsSetupDeploymentName": "[take(concat('EntScale-AzOpsSetup', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "monitoringDeploymentName": "[take(concat('EntScale-Monitoring', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "logAnalyticsPolicyDeploymentName": "[take(concat('EntScale-LAPolicy', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "monitoringSolutionsDeploymentName": "[take(concat('EntScale-Solutions', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "asbPolicyDeploymentName": "[take(concat('EntScale-ASB', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "resourceDiagnosticsPolicyDeploymentName": "[take(concat('EntScale-ResourceDiagnostics', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "activityDiagnosticsPolicyDeploymentName": "[take(concat('EntScale-ActivityDiagnostics', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "ascPolicyDeploymentName": "[take(concat('EntScale-ASC', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "vnetConnectivityHubDeploymentName": "[take(concat('EntScale-HubSpoke', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "vwanConnectivityHubDeploymentName": "[take(concat('EntScale-VWanHub', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "azVmMonitorPolicyDeploymentName": "[take(concat('EntScale-AzVmMonitor', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "azVmssMonitorPolicyDeploymentName": "[take(concat('EntScale-AzVmssMonitor', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "azBackupLzPolicyDeploymentName": "[take(concat('EntScale-AzBackupLz', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "azBackupIdentityPolicyDeploymentName": "[take(concat('EntScale-AzBackupIdentity', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "azPolicyForAksPolicyDeploymentName": "[take(concat('EntScale-AksPolicy', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "aksPrivEscalationPolicyDeploymentName": "[take(concat('EntScale-AksPrivEsc', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "aksHttpsPolicyDeploymentName": "[take(concat('EntScale-AksHttps', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "aksPrivilegedPolicyDeploymentName": "[take(concat('EntScale-AksPrivileged', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "tlsSslPolicyDeploymentName": "[take(concat('EntScale-TLSSSL', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "ipFwPolicyDeploymentName": "[take(concat('EntScale-IPFwd', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "publicEndpointPolicyDeploymentName": "[take(concat('EntScale-PEndpoint', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "publicEndpointPolicyDefinitionName": "[take(concat('EntScale-Policy-PEndpoints', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "privateDnsPolicyDefinitionName": "[take(concat('EntScale-Policy-PrivateDns', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "privateDnsPolicyDeploymentName": "[take(concat('EntScale-PrivDNSAssignment', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "pipPolicyDeploymentName": "[take(concat('EntScale-PIP', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "rdpFromInternetPolicyDeploymentName": "[take(concat('EntScale-RDP', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "rdpFromInternetIdentityPolicyDeploymentName": "[take(concat('EntScale-RDPIdentity', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "storageHttpsPolicyDeploymentName": "[take(concat('EntScale-StorageHttps', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "subnetNsgPolicyDeploymentName": "[take(concat('EntScale-SubnetNsg', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "subnetNsgIdentityPolicyDeploymentName": "[take(concat('EntScale-SubnetNsgIdentity', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "sqlAuditPolicyDeploymentName": "[take(concat('EntScale-SqlAudit', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "sqlEncryptionPolicyDeploymentName": "[take(concat('EntScale-SqlEncrypt', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "onlinelandingZonesubs": "[take(concat('EntScale-OnlinelandingZones', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "corplandingZonesubs": "[take(concat('EntScale-CorplandingZones', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "corpConnectedMovelandingZonesubs": "[take(concat('EntScale-CorpConnlandingZones', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "corpConnectedlandingZonesubs": "[take(concat('EntScale-CorpPeering', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "privateDnsZoneRgDeploymentName": "[take(concat('privateDnsZoneRg', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "privateDnsZonesDeploymentName": "[take(concat('PrivateDnsZone', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "storageDeploymentName": "[take(concat('storage', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "dnsZoneRoleAssignmentDeploymentName": "[take(concat('EntScale-DNSZoneRole', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "identityPeeringDeploymentName": "[take(concat('EntScale-IDPeering', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "identityVwanPeeringDeploymentName": "[take(concat('EntScale-IDVwanPeering', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]",
            "corpConnectedLzVwanSubs": "[take(concat('EntScale-CorpConnlandingZonesVwan', '-', deployment().location, '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 64)]"
        },
        // Declaring deterministic names for Resource Groups that will be created for platform resources
        "storageNamingPrefix": "[concat(parameters('enterpriseScaleCompanyPrefix'), parameters('locationPrefix'), parameters('platformMgmtPrefix'))]",
        "namingPrefix": {
            "management": "[toLower(concat(parameters('enterpriseScaleCompanyPrefix'), '-', parameters('locationPrefix'), '-', parameters('platformMgmtPrefix')))]",
            "connectivity": "[toLower(concat(parameters('enterpriseScaleCompanyPrefix'), '-', parameters('locationPrefix'), '-', parameters('platformConnPrefix')))]",
            "identity": "[toLower(concat(parameters('enterpriseScaleCompanyPrefix'), '-', parameters('locationPrefix'), '-', parameters('platformIdamPrefix')))]"
        },
        "platformManagementResourceGroups": {
            "management": "[toLower(concat(variables('namingPrefix').management, '-', parameters('argPrefix'), '-management'))]",
            "azops": "[toLower(concat(variables('namingPrefix').management, '-', parameters('argPrefix'), '-azops'))]"
        },
        "platformConnectivityResourceGroups": {
            "connectivity": "[toLower(concat(variables('namingPrefix').connectivity, '-', parameters('argPrefix'), '-network'))]",
            "ddos": "[toLower(concat(variables('namingPrefix').connectivity, '-', parameters('argPrefix'), '-ddos'))]",
            "privatedns": "[toLower(concat(variables('namingPrefix').connectivity, '-', parameters('argPrefix'), '-privatedns'))]"
        },
        "platformIdentityResourceGroups": {
            "identityVnet": "[toLower(concat(variables('namingPrefix').identity, '-', parameters('argPrefix'), '-network'))]"
        },
        "platformManagementResourceNames": {
            "logAnalyticsWorkspace": "[toLower(take(concat(variables('namingPrefix').management, '-', parameters('lawPrefix'), '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 24))]",
            "automationAccount": "[toLower(take(concat(variables('namingPrefix').management, '-', parameters('aaaPrefix'), '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 24))]",
            "storageAccount": "[take(toLower(concat(variables('storageNamingPrefix'), parameters('staPrefix'), guid(parameters('enterpriseScaleCompanyPrefix')))), 20)]"

        },
        "vnetAddressSpace": "[substring(parameters('addressPrefix'),0,sub(length(parameters('addressPrefix')), 3))]",
        "platformConnectivityResourceNames": {
            "vpnGwy": "[toLower(concat(variables('namingPrefix').connectivity, '-', parameters('vngPrefix'), '-vpn'))]",
            "vpnGwyIp": "[toLower(concat(variables('namingPrefix').connectivity, '-', parameters('pipPrefix'), '-vpn'))]",
            "erGwy": "[toLower(concat(variables('namingPrefix').connectivity, '-', parameters('vngPrefix'), '-er'))]",
            "erGwyIp": "[toLower(concat(variables('namingPrefix').connectivity, '-', parameters('pipPrefix'), '-er'))]",
            "ddos": "[toLower(take(concat(variables('namingPrefix').connectivity, '-', parameters('ddosPrefix'), '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 24))]",
            "azfw": "[toLower(take(concat(variables('namingPrefix').connectivity, '-', parameters('afwPrefix'), '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 24))]",
            "azfwPolicy": "[toLower(take(concat(variables('namingPrefix').connectivity, '-', parameters('afpPrefix'), '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 24))]",
            "azFwIp": "[toLower(concat(variables('namingPrefix').connectivity, '-', parameters('pipPrefix'), '-afw'))]",
            "vhub": "[toLower(concat(variables('namingPrefix').connectivity, '-', parameters('vHubPrefix'), '-', variables('vnetAddressSpace')))]",
            "vwan": "[toLower(take(concat(variables('namingPrefix').connectivity, '-', parameters('vwanPrefix'), '-', guid(parameters('enterpriseScaleCompanyPrefix'))), 24))]"
        },
        "platformIdentityResourceNames": {
            "identityVnet": "[toLower(concat(variables('namingPrefix').identity, '-', parameters('vntPrefix'), '-', variables('vnetAddressSpace')))]"
        },
        
        "platformManagementResourceIds": {
            "logAnalyticsWorkspace": "[concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('platformManagementResourceGroups').management, '/providers/Microsoft.OperationalInsights/workspaces/', variables('platformManagementResourceNames').logAnalyticsWorkspace)]",
            "automationAccount": "[concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('platformManagementResourceGroups').management, '/providers/Microsoft.Automation/automationAccounts/', variables('platformManagementResourceNames').automationAccount)]",
            "storageAccount": "[concat('/subscriptions/', parameters('managementSubscriptionId'), '/resourceGroups/', variables('platformManagementResourceGroups').management, '/providers/Microsoft.Storage/storageAccounts/', variables('platformManagementResourceNames').storageAccount)]"
        },
        "platformConnectivityResourceIds": {
            "ddos": "[concat('/subscriptions/', parameters('connectivitySubscriptionId'), '/resourceGroups/', variables('platformConnectivityResourceGroups').ddos, '/providers/Microsoft.Network/ddosProtectionPlans/', variables('platformConnectivityResourceNames').ddos)]",
            "vNetHub": "[concat('/subscriptions/', parameters('connectivitySubscriptionId'), '/resourceGroups/', variables('platformConnectivityResourceGroups').connectivity, '/providers/Microsoft.Network/virtualNetworks/', variables('platformConnectivityResourceNames').vhub)]",
            "vWanHub": "[concat('/subscriptions/', parameters('connectivitySubscriptionId'), '/resourceGroups/', variables('platformConnectivityResourceGroups').connectivity, '/providers/Microsoft.Network/virtualHubs/', variables('platformConnectivityResourceNames').vhub)]",
            "privatedns": "[concat('/subscriptions/', parameters('connectivitySubscriptionId'), '/resourceGroups/', variables('platformConnectivityResourceGroups').privatedns)]",
            "azfw": "[concat('/subscriptions/', parameters('connectivitySubscriptionId'), '/resourceGroups/', variables('platformConnectivityResourceGroups').connectivity, '/providers/Microsoft.Network/azureFirewalls/', variables('platformConnectivityResourceNames').azfw)]"
        },
        "privateDnsZones": [
            "privatelink.azure-automation.net",
            "privatelink.database.windows.net",
            "privatelink.sql.azuresynapse.net",
            "privatelink.blob.core.windows.net",
            "privatelink.table.core.windows.net",
            "privatelink.queue.core.windows.net",
            "privatelink.file.core.windows.net",
            "privatelink.web.core.windows.net",
            "privatelink.dfs.core.windows.net",
            "privatelink.documents.azure.com",
            "privatelink.mongo.cosmos.azure.com",
            "privatelink.cassandra.cosmos.azure.com",
            "privatelink.gremlin.cosmos.azure.com",
            "privatelink.postgres.database.azure.com",
            "privatelink.mysql.database.azure.com",
            "privatelink.mariadb.database.azure.com",
            "privatelink.vaultcore.azure.net",
            "[concat('privatelink.', parameters('location'), '.azmk8s.io')]",
            "privatelink.search.windows.net",
            "privatelink.azurecr.io",
            "privatelink.azconfig.io",
            "[concat('privatelink.', parameters('location'), '.backup.windowsazure.com')]",
            "[concat(parameters('location'), '.privatelink.siterecovery.windowsazure.com')]",
            "privatelink.servicebus.windows.net",
            "privatelink.azure-devices.net",
            "privatelink.eventgrid.azure.net",
            "privatelink.azurewebsites.net",
            "privatelink.api.azureml.ms",
            "privatelink.notebooks.azure.net",
            "privatelink.service.signalr.net",
            "privatelink.monitor.azure.com",
            "privatelink.oms.opsinsights.azure.com",
            "privatelink.ods.opsinsights.azure.com",
            "privatelink.agentsvc.azure-automation.net",
            "privatelink.cognitiveservices.azure.com",
            "privatelink.afs.azure.net",
            "privatelink.datafactory.azure.com",
            "privatelink.adf.azure.com",
            "privatelink.redis.cache.windows.net"
        ],
        "roleDefinitions": {
            "networkContributor": "4d97b98b-1d4f-4787-a291-c67834d212e7"
        }
    },
    "resources": [
        {
            "comments": "Linked template for the creation of the Management Group structure",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').mgmtGroupDeploymentName]",
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').managementGroups]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of Azure Policy Definitions at the Customer Root Management Group",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').policyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').policyDefinitions]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of Azure Policy Set Definitions at the root Management Group to prevent usage of public endpoints for PaaS services",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').publicEndpointPolicyDefinitionName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').publicEndpointPolicySetDefinition]"
                },
                "parameters": {}
            }
        },
        {
            "comments": "Linked template for the creation of Azure Policy Set Definitions at the root Management Group to deploy Private DNS Zones for PaaS services",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').privateDnsPolicyDefinitionName]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZonePolicySetDefinition]"
                },
                "parameters": {}
            }
        },
        {
            "comments": "Delay Counter",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat('preparingToLaunch', copyIndex())]",
            "location": "[deployment().location]",
            "scope": "[concat('Microsoft.Management/managementGroups/', parameters('enterpriseScaleCompanyPrefix'))]",
            "dependsOn": [
                "[variables('deploymentNames').policyDeploymentName]",
                "[variables('deploymentNames').privateDnsPolicyDefinitionName]",
                "[variables('deploymentNames').publicEndpointPolicyDefinitionName]"
            ],
            "copy": {
                "batchSize": 1,
                "count": 20,
                "mode": "Serial",
                "name": "policyCompletion"
            },
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-08-01/managementGroupDeploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "resources": [],
                    "outputs": {}
                }
            }
        },
        {
            "comments": "Move the Subscription to the appropriate Management Group or skip if not used. (Platform Management Subscription)",
            "condition": "[not(empty(parameters('managementSubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').managementSubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').managementManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('managementGroups').management]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('managementSubscriptionId')]"
                    }
                }
            }
        },
        {
            "comments": "Move the Subscription to the appropriate Management Group or skip if not used. (Platform Connectivity Subscription)",
            "condition": "[not(empty(parameters('connectivitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').connectivitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('managementGroups').connectivity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    }
                }
            }
        },
        {
            "comments": "Move the Subscription to the appropriate Management Group or skip if not used. (Platform Identity Subscription)",
            "condition": "[not(empty(parameters('identitySubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').identitySubscriptionPlacement]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('managementGroups').identity]"
                    },
                    "subscriptionId": {
                        "value": "[parameters('identitySubscriptionId')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of a Log Analytics Workspace and Automation account in the Platform Management Subscription",
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').monitoringDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').managementSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoring]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformManagementResourceGroups').management]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformManagementResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformManagementResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of Log Analytics Solutions in the Platform Subscription",
            "condition": "[and(and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes')),  equals(parameters('enableLogAnalytics'), 'Yes'), or(or(or(or(or(equals(parameters('enableSecuritySolution'), 'Yes'), equals(parameters('enableAgentHealth'), 'Yes')), equals(parameters('enableChangeTracking'), 'Yes')), equals(parameters('enableUpdateMgmt'), 'Yes'), equals(parameters('enableActivityLog'), 'Yes')), equals(parameters('enableVmInsights'), 'Yes')), equals(parameters('enableServiceMap'), 'Yes'), equals(parameters('enableSqlAssessment'), 'Yes'), equals(parameters('enableKeyVaultAnalytics'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').monitoringSolutionsDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').monitoringSolutions]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformManagementResourceGroups').management]"
                    },
                    "workspaceName": {
                        "value": "[variables('platformManagementResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "enableSecuritySolution": {
                        "value": "[parameters('enableSecuritySolution')]"
                    },
                    "enableAgentHealth": {
                        "value": "[parameters('enableAgentHealth')]"
                    },
                    "enableChangeTracking": {
                        "value": "[parameters('enableChangeTracking')]"
                    },
                    "enableUpdateMgmt": {
                        "value": "[parameters('enableUpdateMgmt')]"
                    },
                    "enableActivityLog": {
                        "value": "[parameters('enableActivityLog')]"
                    },
                    "enableVmInsights": {
                        "value": "[parameters('enableVmInsights')]"
                    },
                    "enableServiceMap": {
                        "value": "[parameters('enableServiceMap')]"
                    },
                    "enableSqlAssessment": {
                        "value": "[parameters('enableSqlAssessment')]"
                    },
                    "enableKeyVaultAnalytics": {
                        "value": "[parameters('enableKeyVaultAnalytics')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the root Management Group to deploy Log Analytics workspace",
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').logAnalyticsPolicyDeploymentName]",
            "scope": "[variables('scopes').managementManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').managementSubscriptionPlacement)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').logAnalyticsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "rgName": {
                        "value": "[variables('platformManagementResourceGroups').management]"
                    },
                    "logAnalyticsWorkspaceName": {
                        "value": "[variables('platformManagementResourceNames').logAnalyticsWorkspace]"
                    },
                    "workspaceRegion": {
                        "value": "[deployment().location]"
                    },
                    "automationAccountName": {
                        "value": "[variables('platformManagementResourceNames').automationAccount]"
                    },
                    "automationRegion": {
                        "value": "[deployment().location]"
                    },
                    "retentionInDays": {
                        "value": "[parameters('retentionInDays')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the root Management Group to deploy Azure Security Benchmark policy initiative",
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), or(equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableAsc'), 'Yes')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').asbPolicyDeploymentName]",
            "scope": "[variables('scopes').topLevelManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').managementSubscriptionPlacement)]",
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').asbPolicyAssignment]"
                },
                "parameters": {}
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the root Management Group to deploy Azure Monitor Resource Diagnostics policy initiative",
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName]",
            "scope": "[variables('scopes').topLevelManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').managementSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceDiagnosticsPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformManagementResourceIds').logAnalyticsWorkspace]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the root Management Group to deploy Azure Activity Diagnostics Log policy definition",
            "condition": "[and(equals(parameters('enableLogAnalytics'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').activityDiagnosticsPolicyDeploymentName]",
            "scope": "[variables('scopes').topLevelManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').activityDiagnosticsPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformManagementResourceIds').logAnalyticsWorkspace]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the root Management Group to deploy the Azure Security Center configuration policy initiative",
            "condition": "[and(equals(parameters('enableAsc'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ascPolicyDeploymentName]",
            "scope": "[variables('scopes').topLevelManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ascConfigPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformManagementResourceIds').logAnalyticsWorkspace]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "emailContactAsc": {
                        "value": "[parameters('emailContactAsc')]"
                    },
                    "enableAscForServers": {
                        "value": "[parameters('enableAscForServers')]"
                    },
                    "enableAscForSql": {
                        "value": "[parameters('enableAscForSql')]"
                    },
                    "enableAscForAppServices": {
                        "value": "[parameters('enableAscForAppServices')]"
                    },
                    "enableAscForStorage": {
                        "value": "[parameters('enableAscForStorage')]"
                    },
                    "enableAscForRegistries": {
                        "value": "[parameters('enableAscForRegistries')]"
                    },
                    "enableAscForKeyVault": {
                        "value": "[parameters('enableAscForKeyVault')]"
                    },
                    "enableAscForSqlOnVm": {
                        "value": "[parameters('enableAscForSqlOnVm')]"
                    },
                    "enableAscForKubernetes": {
                        "value": "[parameters('enableAscForKubernetes')]"
                    },
                    "enableAscForArm": {
                        "value": "[parameters('enableAscForArm')]"
                    },
                    "enableAscForDns": {
                        "value": "[parameters('enableAscForDns')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of the Azure Storage Account",
            "condition": "[and(equals(parameters('enableStorage'), 'Yes'), not(empty(parameters('managementSubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').storageDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').storage]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformManagementResourceGroups').management]"
                    },
                    "storageAccountName": {
                        "value": "[variables('platformManagementResourceNames').storageAccount]"
                    },
                    "location": {
                        "value": "[deployment().location]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of the Azure DDoS Protection Resource Group",
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformConnectivityResourceGroups').ddos]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of the Azure DDoS Protection Plan",
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosProtection]"
                },
                "parameters": {
                    "ddosName": {
                        "value": "[variables('platformConnectivityResourceNames').ddos]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the root Management Group to enforce Azure DDoS Protection Plan on virtual networks",
            "condition": "[and(equals(parameters('enableDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosHubPolicyDeploymentName]",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosPolicyAssignment]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformConnectivityResourceIds').ddos]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Creating the virtual network hub (hub and spoke)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'vhub'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').vnetConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vnetConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "ddosPlanResourceId": {
                        "value": "[variables('platformConnectivityResourceIds').ddos]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "enableDdoS": {
                        "value": "[parameters('enableDdoS')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "subnetMaskForAzFw": {
                        "value": "[parameters('subnetMaskForAzFw')]"
                    },
                    "subnetMaskForGw": {
                        "value": "[parameters('subnetMaskForGw')]"
                    },
                    "firewallZones": {
                        "value": "[parameters('firewallZones')]"
                    },
                    "enableAzFwDnsProxy": {
                        "value": "[parameters('enableAzFwDnsProxy')]"
                    },
                    "gwRegionalOrAz": {
                        "value": "[parameters('gwRegionalOrAz')]"
                    },
                    "gwAzSku": {
                        "value": "[parameters('gwAzSku')]"
                    },
                    "gwRegionalSku": {
                        "value": "[parameters('gwRegionalSku')]"
                    },
                    "erRegionalOrAz": {
                        "value": "[parameters('erRegionalOrAz')]"
                    },
                    "erAzSku": {
                        "value": "[parameters('erAzSku')]"
                    },
                    "erRegionalSku": {
                        "value": "[parameters('erRegionalSku')]"
                    }
                }
            }
        },
        {
            // Creating the VWAN network hub (Microsoft managed)
            "condition": "[and(not(empty(parameters('connectivitySubscriptionId'))),equals(parameters('enableHub'), 'vwan'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "scope": "[variables('scopes').connectivityManagementGroup]",
            "name": "[variables('deploymentNames').vwanConnectivityHubDeploymentName]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "location": "[deployment().location]",
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').vwanConnectivityHub]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enableHub": {
                        "value": "[parameters('enableHub')]"
                    },
                    "enableAzFw": {
                        "value": "[parameters('enableAzFw')]"
                    },
                    "addressPrefix": {
                        "value": "[parameters('addressPrefix')]"
                    },
                    "enableVpnGw": {
                        "value": "[parameters('enableVpnGw')]"
                    },
                    "enableErGw": {
                        "value": "[parameters('enableErGw')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "connectivitySubscriptionId": {
                        "value": "[parameters('connectivitySubscriptionId')]"
                    },
                    "expressRouteScaleUnit": {
                        "value": "[parameters('expressRouteScaleUnit')]"
                    },
                    "vpnGateWayScaleUnit": {
                        "value": "[parameters('vpnGateWayScaleUnit')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of Private DNS Zones Resource Group",
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').privateDnsZoneRgDeploymentName]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').connectivitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').asbPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformConnectivityResourceGroups').privatedns]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of Private DNS Zones",
            "condition": "[and(equals(parameters('enablePrivateDnsZones'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').privateDnsZonesDeploymentName, copyIndex())]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsZoneRgDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]"
            ],
            "copy": {
                "name": "dnsZones",
                "count": "[length(variables('privateDnsZones'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZones]"
                },
                "parameters": {
                    "privateDnsZoneName": {
                        "value": "[concat(variables('privateDnsZones')[copyIndex()])]"
                    },
                    "connectivityHubResourceId": {
                        "value": "[variables('platformConnectivityResourceIds').vNetHub]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Role assignment of a dedicated Service Principal for AzOps",
            "condition": "[and(equals(parameters('enableAzOps'), 'Yes'), not(empty(parameters('principalSecret'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azOpsRbacDeploymentName]",
            "scope": "[variables('scopes').topLevelManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').managementSubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azOpsRBAC]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "principalId": {
                        "value": "[parameters('principalId')]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of the AzOps Resource Group",
            "condition": "[and(equals(parameters('enableAzOps'), 'Yes'), not(empty(parameters('principalSecret'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azopsDeploymentName]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').managementSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').azOpsRbacDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').resourceGroup]"
                },
                "parameters": {
                    "rgName": {
                        "value": "[variables('platformManagementResourceGroups').azops]"
                    },
                    "location": {
                        "value": "[deployment().location]"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the creation of the GitHub repository and bootstraps the CICD pipeline",
            "condition": "[and(equals(parameters('enableAzOps'), 'Yes'), not(empty(parameters('principalSecret'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azOpsSetupDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('managementSubscriptionId')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').managementSubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').azOpsRbacDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').azopsDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringSolutionsDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "corplandingZones",
                "onlinelandingZones"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azOpsSetup]"
                },
                "parameters": {
                    "paToken": {
                        "value": "[parameters('paToken')]"
                    },
                    "principalSecret": {
                        "value": "[parameters('principalSecret')]"
                    },
                    "gitHubUserNameOrOrg": {
                        "value": "[parameters('gitHubUserNameOrOrg')]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "appId": {
                        "value": "[parameters('appId')]"
                    },
                    "repositoryName": {
                        "value": "[parameters('repositoryName')]"
                    }
                }
            }
        },
        {
            // Deploying Private DNS Zones policy assignment for PaaS services using built-in policies
            "condition": "[equals(parameters('enablePrivateDnsZonesForlandingZones'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').privateDnsPolicyDeploymentName]",
            "location": "[deployment().location]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').mgmtGroupDeploymentName)]",
                "dnsZones",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').privateDnsPolicyDefinitionName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').privateDnsZonePolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "location": {
                        "value": "[parameters('location')]"
                    },
                    "dnsZoneResourceGroupId": {
                        "value": "[variables('platformConnectivityResourceIds').privatedns]"
                    }
                }
            }
        },
        {
            // Assigning RBAC for Private DNS Zone Policy assignment to the connectivity hub
            "condition": "[equals(parameters('enablePrivateDnsZonesForlandingZones'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-10-01",
            "name": "[variables('deploymentNames').dnsZoneRoleAssignmentDeploymentName]",
            "location": "[deployment().location]",
            "subscriptionId": "[parameters('connectivitySubscriptionId')]",
            "dependsOn": [
                "[variables('deploymentNames').privateDnsPolicyDeploymentName]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').roleAssignments]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "principalId": {
                        "value": "[if(equals(parameters('enablePrivateDnsZonesForlandingZones'), 'Yes'), reference(variables('deploymentNames').privateDnsPolicyDeploymentName).outputs.principalId.value, 'na')]"
                    },
                    "roleDefinitionId": {
                        "value": "[variables('roleDefinitions').networkContributor]"
                    }
                }
            }
        },
        {
            // Assigning Azure Monitor for VMs policy initiative to intermediate root management group if condition is true
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmMonitoring'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').topLevelManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmMonitorPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformManagementResourceIds').logAnalyticsWorkspace]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning Azure Monitor for VMSS policy initiative to intermediate root management group if condition is true
            "condition": "[and(not(empty(parameters('managementSubscriptionId'))), equals(parameters('enableLogAnalytics'), 'Yes'), equals(parameters('enableVmssMonitoring'), 'Yes'))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azVmssMonitorPolicyDeploymentName]",
            "scope": "[variables('scopes').topLevelManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').monitoringDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azVmssMonitorPolicyAssignment]"
                },
                "parameters": {
                    "logAnalyticsResourceId": {
                        "value": "[variables('platformManagementResourceIds').logAnalyticsWorkspace]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning Azure Backup policy to landing zones management group if condition is true
            "condition": "[equals(parameters('enableVmBackup'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azBackupLzPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azBackupLzPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning DDoS Policy to enforce DDoS on virtual networks in landing zones management group if condition evaluates to true
            "condition": "[and(equals(parameters('enableLzDdoS'), 'Yes'), not(empty(parameters('connectivitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ddosLzPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ddosDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ddosPolicyAssignment]"
                },
                "parameters": {
                    "ddosPlanResourceId": {
                        "value": "[variables('platformConnectivityResourceIds').ddos]"
                    },
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning Azure Policy enablement policy for AKS to landing zones management group if condition is true
            "condition": "[equals(parameters('enableAksPolicy'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azPolicyForAksPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azPolicyForAksPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning Aks Priv Escalation policy to landing zones management group if condition is true
            "condition": "[equals(parameters('denyAksPrivilegedEscalation'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksPrivEscalationPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksPrivEscalationPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning Aks Priviliged policy to landing zones management group if condition is true
            "condition": "[equals(parameters('denyAksPrivileged'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksPrivilegedPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksPrivilegedPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning Https enforcement for AKS policy to landing zones management group if condition is true
            "condition": "[equals(parameters('denyHttpIngressForAks'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').aksHttpsPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').aksHttpsPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning TLS-SSL policy initiative to landing zones management group if condition is true
            "condition": "[equals(parameters('enableEncryptionInTransit'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').tlsSslPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').tlsSslPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Assigning IP Fwd policy to landing zones management group if condition is true
            "condition": "[equals(parameters('denyIpForwarding'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').ipFwPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').ipFwdPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Landing Zone Management Group to deny the Public endpoint Policy Initiative",
            "condition": "[equals(parameters('denyPublicEndpoints'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').publicEndpointPolicyDeploymentName]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').publicEndpointPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Landing Zone Management Group to deny RDP from internet",
            "condition": "[equals(parameters('denyRdp'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').rdpFromInternetPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').rdpFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Landing Zone Management Group to deny storage without HTTPS",
            "condition": "[equals(parameters('enableStorageHttps'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').storageHttpsPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').storageHttpsPolicyAssignment]"
                },
                "parameters": {
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Landing Zone Management Group to deny subnets without nsg",
            "condition": "[equals(parameters('denySubnetWithoutNsg'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').subnetNsgPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "policyCompletion"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Landing Zone Management Group to audit SQL configuration",
            "condition": "[equals(parameters('enableSqlAudit'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sqlAuditPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sqlAuditPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Landing Zone Management Group to deploy SQL encryption",
            "condition": "[equals(parameters('enableSqlEncryption'), 'Yes')]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').sqlEncryptionPolicyDeploymentName]",
            "scope": "[variables('scopes').landingZonesManagegmentGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').sqlEncryptionPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Platform Identity Management Group to deploy Azure Backup",
            "condition": "[and(equals(parameters('enableVmBackupForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').azBackupIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').azBackupLzPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Platform Identity Management Group to deny Public Ip Addresses",
            "condition": "[and(equals(parameters('denyPipForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').pipPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').pipPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Platform Identity Management Group to deny subnets without nsg",
            "condition": "[and(equals(parameters('denySubnetWithoutNsgForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').subnetNsgIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subnetNsgPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            "comments": "Linked template for the Azure Policy Assignment at the Platform Identity Management Group to deny RDP from internet",
            "condition": "[and(equals(parameters('denyRdpForIdentity'), 'Yes'), not(empty(parameters('identitySubscriptionId'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[variables('deploymentNames').rdpFromInternetIdentityPolicyDeploymentName]",
            "scope": "[variables('scopes').identityManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "policyCompletion",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').rdpFromInternetPolicyAssignment]"
                },
                "parameters": {
                    "topLevelManagementGroupPrefix": {
                        "value": "[parameters('enterpriseScaleCompanyPrefix')]"
                    },
                    "enforcementMode": {
                        "value": "Default"
                    }
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub if vhub is true
            "condition": "[and(equals(parameters('enableHub'), 'vhub'), not(empty(parameters('identityAddressPrefix'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityPeeringDeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVnetPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformIdentityResourceGroups').identityVnet]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('identitySubscriptionId'), variables('platformIdentityResourceNames').identityVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "hubResourceId": {
                        "value": "[variables('platformConnectivityResourceIds').vNetHub]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[variables('platformConnectivityResourceIds').azfw]"
                    }
                }
            }
        },
        {
            // Peer vnet in identity subscription to connectivity hub if vwan contidion is true
            "condition": "[and(equals(parameters('enableHub'), 'vwan'), not(empty(parameters('identityAddressPrefix'))))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[variables('deploymentNames').identityVwanPeeringDeploymentName]",
            "subscriptionId": "[parameters('identitySubscriptionId')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vnetConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').vwanConnectivityHubDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').identitySubscriptionPlacement)]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').corpVwanPeering]"
                },
                "parameters": {
                    "vNetRgName": {
                        "value": "[variables('platformIdentityResourceGroups').identityVnet]"
                    },
                    "vNetName": {
                        "value": "[concat(parameters('identitySubscriptionId'), variables('platformIdentityResourceNames').identityVnet)]"
                    },
                    "vNetLocation": {
                        "value": "[parameters('location')]"
                    },
                    "vNetCidrRange": {
                        "value": "[parameters('identityAddressPrefix')]"
                    },
                    "vWanHubResourceId": {
                        "value": "[variables('platformConnectivityResourceIds').vWanHub]"
                    },
                    "azureFirewallResourceId": {
                        "value": "[if(equals(parameters('enableAzFwDnsProxy'), 'Yes'), variables('platformConnectivityResourceIds').azfw, '')]"
                    }
                }
            }
        },
        {
            "comments": "Move the Subscription to the appropriate Management Group or skip if not used",
            "condition": "[not(empty(parameters('onlinelandingZonesubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').onlinelandingZonesubs, copyIndex())]",
            "scope": "[variables('scopes').onlineManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "copy": {
                "name": "onlinelandingZones",
                "count": "[length(parameters('onlinelandingZonesubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('managementGroups').online]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('onlinelandingZonesubscriptionId')[copyIndex()])]"
                    }
                }
            }
        },
        {
            "comments": "Move the Subscription to the appropriate Management Group or skip if not used",
            "condition": "[not(empty(parameters('corplandingZonesubscriptionId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-10-01",
            "name": "[concat(variables('deploymentNames').corplandingZonesubs, copyIndex())]",
            "scope": "[variables('scopes').corpManagementGroup]",
            "location": "[deployment().location]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').policyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').activityDiagnosticsPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').ascPolicyDeploymentName)]",
                "[resourceId('Microsoft.Resources/deployments', variables('deploymentNames').resourceDiagnosticsPolicyDeploymentName)]"
            ],
            "copy": {
                "name": "corplandingZones",
                "count": "[length(parameters('corplandingZonesubscriptionId'))]"
            },
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "contentVersion": "1.0.0.0",
                    "uri": "[variables('deploymentUris').subscriptionPlacement]"
                },
                "parameters": {
                    "targetManagementGroupId": {
                        "value": "[variables('managementGroups').corp]"
                    },
                    "subscriptionId": {
                        "value": "[concat(parameters('corplandingZonesubscriptionId')[copyIndex()])]"
                    }
                }
            }
        }
    ],
    "outputs": {
        "deployment": {
            "type": "string",
            "value": "[concat(deployment().name, ' has successfully deployed. Welcome to Enterprise-Scale!')]"
        }
    }
}